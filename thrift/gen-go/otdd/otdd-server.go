// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package otdd

import(
	"bytes"
	"context"
	"reflect"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// Attributes:
//  - TestId
//  - RunId
//  - Port
//  - PassthroughConnections
//  - InboundRequest
type TestCase struct {
  TestId string `thrift:"testId,1" db:"testId" json:"testId"`
  RunId string `thrift:"runId,2" db:"runId" json:"runId"`
  Port int32 `thrift:"port,3" db:"port" json:"port"`
  PassthroughConnections []string `thrift:"passthroughConnections,4" db:"passthroughConnections" json:"passthroughConnections"`
  InboundRequest []byte `thrift:"inboundRequest,5" db:"inboundRequest" json:"inboundRequest"`
}

func NewTestCase() *TestCase {
  return &TestCase{}
}


func (p *TestCase) GetTestId() string {
  return p.TestId
}

func (p *TestCase) GetRunId() string {
  return p.RunId
}

func (p *TestCase) GetPort() int32 {
  return p.Port
}

func (p *TestCase) GetPassthroughConnections() []string {
  return p.PassthroughConnections
}

func (p *TestCase) GetInboundRequest() []byte {
  return p.InboundRequest
}
func (p *TestCase) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TestCase)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TestId = v
}
  return nil
}

func (p *TestCase)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RunId = v
}
  return nil
}

func (p *TestCase)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Port = v
}
  return nil
}

func (p *TestCase)  ReadField4(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.PassthroughConnections =  tSlice
  for i := 0; i < size; i ++ {
var _elem0 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem0 = v
}
    p.PassthroughConnections = append(p.PassthroughConnections, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TestCase)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.InboundRequest = v
}
  return nil
}

func (p *TestCase) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TestCase"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TestCase) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("testId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:testId: ", p), err) }
  if err := oprot.WriteString(string(p.TestId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.testId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:testId: ", p), err) }
  return err
}

func (p *TestCase) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("runId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:runId: ", p), err) }
  if err := oprot.WriteString(string(p.RunId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.runId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:runId: ", p), err) }
  return err
}

func (p *TestCase) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("port", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:port: ", p), err) }
  if err := oprot.WriteI32(int32(p.Port)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.port (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:port: ", p), err) }
  return err
}

func (p *TestCase) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("passthroughConnections", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:passthroughConnections: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.PassthroughConnections)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.PassthroughConnections {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:passthroughConnections: ", p), err) }
  return err
}

func (p *TestCase) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("inboundRequest", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:inboundRequest: ", p), err) }
  if err := oprot.WriteBinary(p.InboundRequest); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.inboundRequest (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:inboundRequest: ", p), err) }
  return err
}

func (p *TestCase) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TestCase(%+v)", *p)
}

// Attributes:
//  - TestId
//  - RunId
//  - InboundRequest
//  - InboundRequestErr
//  - InboundResponse
//  - InboundResponseErr
type TestResult_ struct {
  TestId string `thrift:"testId,1" db:"testId" json:"testId"`
  RunId string `thrift:"runId,2" db:"runId" json:"runId"`
  InboundRequest []byte `thrift:"inboundRequest,3" db:"inboundRequest" json:"inboundRequest"`
  InboundRequestErr string `thrift:"inboundRequestErr,4" db:"inboundRequestErr" json:"inboundRequestErr"`
  InboundResponse []byte `thrift:"inboundResponse,5" db:"inboundResponse" json:"inboundResponse"`
  InboundResponseErr string `thrift:"inboundResponseErr,6" db:"inboundResponseErr" json:"inboundResponseErr"`
}

func NewTestResult_() *TestResult_ {
  return &TestResult_{}
}


func (p *TestResult_) GetTestId() string {
  return p.TestId
}

func (p *TestResult_) GetRunId() string {
  return p.RunId
}

func (p *TestResult_) GetInboundRequest() []byte {
  return p.InboundRequest
}

func (p *TestResult_) GetInboundRequestErr() string {
  return p.InboundRequestErr
}

func (p *TestResult_) GetInboundResponse() []byte {
  return p.InboundResponse
}

func (p *TestResult_) GetInboundResponseErr() string {
  return p.InboundResponseErr
}
func (p *TestResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TestResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TestId = v
}
  return nil
}

func (p *TestResult_)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RunId = v
}
  return nil
}

func (p *TestResult_)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.InboundRequest = v
}
  return nil
}

func (p *TestResult_)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.InboundRequestErr = v
}
  return nil
}

func (p *TestResult_)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.InboundResponse = v
}
  return nil
}

func (p *TestResult_)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.InboundResponseErr = v
}
  return nil
}

func (p *TestResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TestResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TestResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("testId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:testId: ", p), err) }
  if err := oprot.WriteString(string(p.TestId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.testId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:testId: ", p), err) }
  return err
}

func (p *TestResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("runId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:runId: ", p), err) }
  if err := oprot.WriteString(string(p.RunId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.runId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:runId: ", p), err) }
  return err
}

func (p *TestResult_) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("inboundRequest", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:inboundRequest: ", p), err) }
  if err := oprot.WriteBinary(p.InboundRequest); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.inboundRequest (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:inboundRequest: ", p), err) }
  return err
}

func (p *TestResult_) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("inboundRequestErr", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:inboundRequestErr: ", p), err) }
  if err := oprot.WriteString(string(p.InboundRequestErr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.inboundRequestErr (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:inboundRequestErr: ", p), err) }
  return err
}

func (p *TestResult_) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("inboundResponse", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:inboundResponse: ", p), err) }
  if err := oprot.WriteBinary(p.InboundResponse); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.inboundResponse (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:inboundResponse: ", p), err) }
  return err
}

func (p *TestResult_) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("inboundResponseErr", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:inboundResponseErr: ", p), err) }
  if err := oprot.WriteString(string(p.InboundResponseErr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.inboundResponseErr (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:inboundResponseErr: ", p), err) }
  return err
}

func (p *TestResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TestResult_(%+v)", *p)
}

type OtddTestRunnerService interface {
  // Parameters:
  //  - Username
  //  - Tag
  //  - Mac
  FetchTestCase(ctx context.Context, username string, tag string, mac string) (r *TestCase, err error)
  // Parameters:
  //  - TestId
  //  - Req
  FetchOutboundResp(ctx context.Context, testId string, req []byte) (r []byte, err error)
  // Parameters:
  //  - Result_
  ReportTestResult_(ctx context.Context, result *TestResult_) (r bool, err error)
}

type OtddTestRunnerServiceClient struct {
  c thrift.TClient
}

func NewOtddTestRunnerServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *OtddTestRunnerServiceClient {
  return &OtddTestRunnerServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewOtddTestRunnerServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *OtddTestRunnerServiceClient {
  return &OtddTestRunnerServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewOtddTestRunnerServiceClient(c thrift.TClient) *OtddTestRunnerServiceClient {
  return &OtddTestRunnerServiceClient{
    c: c,
  }
}

func (p *OtddTestRunnerServiceClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - Username
//  - Tag
//  - Mac
func (p *OtddTestRunnerServiceClient) FetchTestCase(ctx context.Context, username string, tag string, mac string) (r *TestCase, err error) {
  var _args1 OtddTestRunnerServiceFetchTestCaseArgs
  _args1.Username = username
  _args1.Tag = tag
  _args1.Mac = mac
  var _result2 OtddTestRunnerServiceFetchTestCaseResult
  if err = p.Client_().Call(ctx, "fetchTestCase", &_args1, &_result2); err != nil {
    return
  }
  return _result2.GetSuccess(), nil
}

// Parameters:
//  - TestId
//  - Req
func (p *OtddTestRunnerServiceClient) FetchOutboundResp(ctx context.Context, testId string, req []byte) (r []byte, err error) {
  var _args3 OtddTestRunnerServiceFetchOutboundRespArgs
  _args3.TestId = testId
  _args3.Req = req
  var _result4 OtddTestRunnerServiceFetchOutboundRespResult
  if err = p.Client_().Call(ctx, "fetchOutboundResp", &_args3, &_result4); err != nil {
    return
  }
  return _result4.GetSuccess(), nil
}

// Parameters:
//  - Result_
func (p *OtddTestRunnerServiceClient) ReportTestResult_(ctx context.Context, result *TestResult_) (r bool, err error) {
  var _args5 OtddTestRunnerServiceReportTestResultArgs
  _args5.Result_ = result
  var _result6 OtddTestRunnerServiceReportTestResultResult
  if err = p.Client_().Call(ctx, "reportTestResult", &_args5, &_result6); err != nil {
    return
  }
  return _result6.GetSuccess(), nil
}

type OtddTestRunnerServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler OtddTestRunnerService
}

func (p *OtddTestRunnerServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *OtddTestRunnerServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *OtddTestRunnerServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewOtddTestRunnerServiceProcessor(handler OtddTestRunnerService) *OtddTestRunnerServiceProcessor {

  self7 := &OtddTestRunnerServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self7.processorMap["fetchTestCase"] = &otddTestRunnerServiceProcessorFetchTestCase{handler:handler}
  self7.processorMap["fetchOutboundResp"] = &otddTestRunnerServiceProcessorFetchOutboundResp{handler:handler}
  self7.processorMap["reportTestResult"] = &otddTestRunnerServiceProcessorReportTestResult_{handler:handler}
return self7
}

func (p *OtddTestRunnerServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x8 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x8.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x8

}

type otddTestRunnerServiceProcessorFetchTestCase struct {
  handler OtddTestRunnerService
}

func (p *otddTestRunnerServiceProcessorFetchTestCase) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OtddTestRunnerServiceFetchTestCaseArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("fetchTestCase", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OtddTestRunnerServiceFetchTestCaseResult{}
var retval *TestCase
  var err2 error
  if retval, err2 = p.handler.FetchTestCase(ctx, args.Username, args.Tag, args.Mac); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing fetchTestCase: " + err2.Error())
    oprot.WriteMessageBegin("fetchTestCase", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("fetchTestCase", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type otddTestRunnerServiceProcessorFetchOutboundResp struct {
  handler OtddTestRunnerService
}

func (p *otddTestRunnerServiceProcessorFetchOutboundResp) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OtddTestRunnerServiceFetchOutboundRespArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("fetchOutboundResp", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OtddTestRunnerServiceFetchOutboundRespResult{}
var retval []byte
  var err2 error
  if retval, err2 = p.handler.FetchOutboundResp(ctx, args.TestId, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing fetchOutboundResp: " + err2.Error())
    oprot.WriteMessageBegin("fetchOutboundResp", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("fetchOutboundResp", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type otddTestRunnerServiceProcessorReportTestResult_ struct {
  handler OtddTestRunnerService
}

func (p *otddTestRunnerServiceProcessorReportTestResult_) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OtddTestRunnerServiceReportTestResultArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("reportTestResult", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OtddTestRunnerServiceReportTestResultResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.ReportTestResult_(ctx, args.Result_); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing reportTestResult: " + err2.Error())
    oprot.WriteMessageBegin("reportTestResult", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("reportTestResult", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Username
//  - Tag
//  - Mac
type OtddTestRunnerServiceFetchTestCaseArgs struct {
  Username string `thrift:"username,1" db:"username" json:"username"`
  Tag string `thrift:"tag,2" db:"tag" json:"tag"`
  Mac string `thrift:"mac,3" db:"mac" json:"mac"`
}

func NewOtddTestRunnerServiceFetchTestCaseArgs() *OtddTestRunnerServiceFetchTestCaseArgs {
  return &OtddTestRunnerServiceFetchTestCaseArgs{}
}


func (p *OtddTestRunnerServiceFetchTestCaseArgs) GetUsername() string {
  return p.Username
}

func (p *OtddTestRunnerServiceFetchTestCaseArgs) GetTag() string {
  return p.Tag
}

func (p *OtddTestRunnerServiceFetchTestCaseArgs) GetMac() string {
  return p.Mac
}
func (p *OtddTestRunnerServiceFetchTestCaseArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OtddTestRunnerServiceFetchTestCaseArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Username = v
}
  return nil
}

func (p *OtddTestRunnerServiceFetchTestCaseArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Tag = v
}
  return nil
}

func (p *OtddTestRunnerServiceFetchTestCaseArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Mac = v
}
  return nil
}

func (p *OtddTestRunnerServiceFetchTestCaseArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("fetchTestCase_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OtddTestRunnerServiceFetchTestCaseArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("username", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:username: ", p), err) }
  if err := oprot.WriteString(string(p.Username)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.username (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:username: ", p), err) }
  return err
}

func (p *OtddTestRunnerServiceFetchTestCaseArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tag", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tag: ", p), err) }
  if err := oprot.WriteString(string(p.Tag)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tag (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tag: ", p), err) }
  return err
}

func (p *OtddTestRunnerServiceFetchTestCaseArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mac", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:mac: ", p), err) }
  if err := oprot.WriteString(string(p.Mac)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mac (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:mac: ", p), err) }
  return err
}

func (p *OtddTestRunnerServiceFetchTestCaseArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OtddTestRunnerServiceFetchTestCaseArgs(%+v)", *p)
}

// Attributes:
//  - Success
type OtddTestRunnerServiceFetchTestCaseResult struct {
  Success *TestCase `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewOtddTestRunnerServiceFetchTestCaseResult() *OtddTestRunnerServiceFetchTestCaseResult {
  return &OtddTestRunnerServiceFetchTestCaseResult{}
}

var OtddTestRunnerServiceFetchTestCaseResult_Success_DEFAULT *TestCase
func (p *OtddTestRunnerServiceFetchTestCaseResult) GetSuccess() *TestCase {
  if !p.IsSetSuccess() {
    return OtddTestRunnerServiceFetchTestCaseResult_Success_DEFAULT
  }
return p.Success
}
func (p *OtddTestRunnerServiceFetchTestCaseResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *OtddTestRunnerServiceFetchTestCaseResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OtddTestRunnerServiceFetchTestCaseResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TestCase{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *OtddTestRunnerServiceFetchTestCaseResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("fetchTestCase_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OtddTestRunnerServiceFetchTestCaseResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *OtddTestRunnerServiceFetchTestCaseResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OtddTestRunnerServiceFetchTestCaseResult(%+v)", *p)
}

// Attributes:
//  - TestId
//  - Req
type OtddTestRunnerServiceFetchOutboundRespArgs struct {
  TestId string `thrift:"testId,1" db:"testId" json:"testId"`
  Req []byte `thrift:"req,2" db:"req" json:"req"`
}

func NewOtddTestRunnerServiceFetchOutboundRespArgs() *OtddTestRunnerServiceFetchOutboundRespArgs {
  return &OtddTestRunnerServiceFetchOutboundRespArgs{}
}


func (p *OtddTestRunnerServiceFetchOutboundRespArgs) GetTestId() string {
  return p.TestId
}

func (p *OtddTestRunnerServiceFetchOutboundRespArgs) GetReq() []byte {
  return p.Req
}
func (p *OtddTestRunnerServiceFetchOutboundRespArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OtddTestRunnerServiceFetchOutboundRespArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TestId = v
}
  return nil
}

func (p *OtddTestRunnerServiceFetchOutboundRespArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Req = v
}
  return nil
}

func (p *OtddTestRunnerServiceFetchOutboundRespArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("fetchOutboundResp_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OtddTestRunnerServiceFetchOutboundRespArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("testId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:testId: ", p), err) }
  if err := oprot.WriteString(string(p.TestId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.testId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:testId: ", p), err) }
  return err
}

func (p *OtddTestRunnerServiceFetchOutboundRespArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:req: ", p), err) }
  if err := oprot.WriteBinary(p.Req); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:req: ", p), err) }
  return err
}

func (p *OtddTestRunnerServiceFetchOutboundRespArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OtddTestRunnerServiceFetchOutboundRespArgs(%+v)", *p)
}

// Attributes:
//  - Success
type OtddTestRunnerServiceFetchOutboundRespResult struct {
  Success []byte `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewOtddTestRunnerServiceFetchOutboundRespResult() *OtddTestRunnerServiceFetchOutboundRespResult {
  return &OtddTestRunnerServiceFetchOutboundRespResult{}
}

var OtddTestRunnerServiceFetchOutboundRespResult_Success_DEFAULT []byte

func (p *OtddTestRunnerServiceFetchOutboundRespResult) GetSuccess() []byte {
  return p.Success
}
func (p *OtddTestRunnerServiceFetchOutboundRespResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *OtddTestRunnerServiceFetchOutboundRespResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OtddTestRunnerServiceFetchOutboundRespResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = v
}
  return nil
}

func (p *OtddTestRunnerServiceFetchOutboundRespResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("fetchOutboundResp_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OtddTestRunnerServiceFetchOutboundRespResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBinary(p.Success); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *OtddTestRunnerServiceFetchOutboundRespResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OtddTestRunnerServiceFetchOutboundRespResult(%+v)", *p)
}

// Attributes:
//  - Result_
type OtddTestRunnerServiceReportTestResultArgs struct {
  Result_ *TestResult_ `thrift:"result,1" db:"result" json:"result"`
}

func NewOtddTestRunnerServiceReportTestResultArgs() *OtddTestRunnerServiceReportTestResultArgs {
  return &OtddTestRunnerServiceReportTestResultArgs{}
}

var OtddTestRunnerServiceReportTestResultArgs_Result__DEFAULT *TestResult_
func (p *OtddTestRunnerServiceReportTestResultArgs) GetResult_() *TestResult_ {
  if !p.IsSetResult_() {
    return OtddTestRunnerServiceReportTestResultArgs_Result__DEFAULT
  }
return p.Result_
}
func (p *OtddTestRunnerServiceReportTestResultArgs) IsSetResult_() bool {
  return p.Result_ != nil
}

func (p *OtddTestRunnerServiceReportTestResultArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OtddTestRunnerServiceReportTestResultArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Result_ = &TestResult_{}
  if err := p.Result_.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Result_), err)
  }
  return nil
}

func (p *OtddTestRunnerServiceReportTestResultArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("reportTestResult_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OtddTestRunnerServiceReportTestResultArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("result", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:result: ", p), err) }
  if err := p.Result_.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Result_), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:result: ", p), err) }
  return err
}

func (p *OtddTestRunnerServiceReportTestResultArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OtddTestRunnerServiceReportTestResultArgs(%+v)", *p)
}

// Attributes:
//  - Success
type OtddTestRunnerServiceReportTestResultResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewOtddTestRunnerServiceReportTestResultResult() *OtddTestRunnerServiceReportTestResultResult {
  return &OtddTestRunnerServiceReportTestResultResult{}
}

var OtddTestRunnerServiceReportTestResultResult_Success_DEFAULT bool
func (p *OtddTestRunnerServiceReportTestResultResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return OtddTestRunnerServiceReportTestResultResult_Success_DEFAULT
  }
return *p.Success
}
func (p *OtddTestRunnerServiceReportTestResultResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *OtddTestRunnerServiceReportTestResultResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OtddTestRunnerServiceReportTestResultResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *OtddTestRunnerServiceReportTestResultResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("reportTestResult_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OtddTestRunnerServiceReportTestResultResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *OtddTestRunnerServiceReportTestResultResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OtddTestRunnerServiceReportTestResultResult(%+v)", *p)
}


